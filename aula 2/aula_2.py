# -*- coding: utf-8 -*-
"""aula 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fp1Rc5pnlhP0ewy2exBjbsTw1IhEu-9d
"""

import pandas as pd

uri = "https://gist.githubusercontent.com/guilhermesilveira/2d2efa37d66b6c84a722ea627a897ced/raw/10968b997d885cbded1c92938c7a9912ba41c615/tracking.csv"
dados = pd.read_csv(uri)

dados.head()

x =  dados [["home", "how_it_works", "contact"]]
y = dados [["bought"]]

dados.shape

treino_x = x[:75]
treino_y =y[:75]
teste_x = x[75:]
teste_y = y[75:]

print(f'Treinamos com {len(treino_x)} e testaremos com {len(teste_x)}')

from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score

modelo = LinearSVC()
modelo.fit(treino_x, treino_y)

previsoes = modelo.predict(teste_x)
taxa_acerto =  accuracy_score(teste_y, previsoes)

print(f'Taxa de acerto {(taxa_acerto * 100) :.2f}')

"""#Utilização da biblioteca para treino e teste do modelo com a biblioteca 
#train_test_split
"""

from sklearn.model_selection import train_test_split
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score

SEED = 20

treino_x, teste_x, treino_y, teste_y = train_test_split(x, y, random_state= SEED, test_size= 0.25, stratify= y)

print(f'Treinamos com {len(treino_x)} e testaremos com {len(teste_x)}')



modelo = LinearSVC()
modelo.fit(treino_x, treino_y)

previsoes = modelo.predict(teste_x)
taxa_acerto =  accuracy_score(teste_y, previsoes)

print(f'Taxa de acerto {(taxa_acerto * 100) :.2f}')

