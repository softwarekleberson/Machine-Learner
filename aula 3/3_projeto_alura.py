# -*- coding: utf-8 -*-
"""3 projeto alura

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mcT5XenDhdIWvr6SsU_GBS0OqXSamBBu
"""

import pandas as pd

uri = "https://gist.githubusercontent.com/guilhermesilveira/1b7d5475863c15f484ac495bd70975cf/raw/16aff7a0aee67e7c100a2a48b676a2d2d142f646/projects.csv"
dados = pd.read_csv(uri)
dados.head()

a_renomear = {
    'unfinished' : 'nao_finalizado',
    'expected_hours' : 'horas_experadas',
    'price' : 'preco'

}
dados = dados.rename(columns = a_renomear)

dados.head()

troca = {
    0 : 1,
    1 : 0
}
dados['finalizado'] = dados.nao_finalizado.map(troca)
dados.head()

dados.tail()

import seaborn as sns
sns.scatterplot(x = "horas_experadas", y = "preco", data = dados)

sns.relplot(x = "horas_experadas", y = "preco", hue="finalizado", col="finalizado", data = dados)

x = dados[['horas_experadas', 'preco']]
y = dados['finalizado']

from sklearn.model_selection import train_test_split
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score

SEED = 5

treino_x, teste_x, treino_y, teste_y = train_test_split(x, y,
                                                         random_state = SEED, test_size = 0.25,
                                                         stratify = y)
print("Treinaremos com %d elementos e testaremos com %d elementos" % (len(treino_x), len(teste_x)))

modelo = LinearSVC()
modelo.fit(treino_x, treino_y)
previsoes = modelo.predict(teste_x)

acuracia = accuracy_score(teste_y, previsoes) * 100
print("A acurácia foi %.2f%%" % acuracia)

import numpy as np
Previsoes_De_Base = np.ones(540)

acuracia = accuracy_score(teste_y, Previsoes_De_Base) * 100
print("A acurácia do algoritimo de base foi %.2f%%" % acuracia)

sns.scatterplot(x = "horas_experadas", y = "preco", hue=teste_y, data = teste_x)

x_min = teste_x.horas_experadas.min()
x_max = teste_x.horas_experadas.max()

y_min = teste_x.preco.min()
y_max = teste_x.preco.max()

print(x_min, x_max, y_min, y_max)

pixels = 100
eixo_x = np.arange(x_min, x_max, (x_max - x_min) / pixels)

eixo_y = np.arange(y_min, y_max, (y_max - y_min) / pixels)

xx, yy = np.meshgrid(eixo_x, eixo_y)
pontos = np.c_[xx.ravel(), yy.ravel()]
pontos

z = modelo.predict(pontos)
z = z.reshape(xx.shape)
z

import matplotlib.pyplot as plt

plt.contourf(xx, yy, z, alpha = 0.3)
plt.scatter(teste_x.horas_experadas, teste_x.preco, c = teste_y, s = 1)